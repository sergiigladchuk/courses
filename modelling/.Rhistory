source('~/Documents/courses/modelling/ex_1.R')
for (i in 1:10) {
x <- seq(100)
y <- seq(100)
y[1] <- 0
for (j in 1 : (lenOfWalk - 1)) {
y[j + 1] <- y[j] + rnorm(1)
}
#add to plot
plot(x, y)
}
for (i in 1:10) {
x <- seq(100)
y <- seq(100)
y[1] <- 0
for (j in 1 : (lenOfWalk - 1)) {
y[j + 1] <- y[j] + rnorm(1)
}
#add to plot
plot(x, y, type = 'l')
}
source('~/Documents/courses/modelling/ex_1.R')
source('~/Documents/courses/modelling/ex_1.R')
source('~/Documents/courses/modelling/ex_1.R')
source('~/Documents/courses/modelling/ex_1.R')
mymax <- function(a,b) {
if (a > b) {
a
} else {
b
}
}
mymax(5,6)
myWeightSub <- function(inVec, weiVec) {
multVec = inVec * weiVec
sum(multVec)
}
myWeightSub(c(3,5,-1),c(1,2,1))
myFibonachi <- function(n) {
fibo <- c(1,1)
for (i in 3:n){
fibo <- c(fibo, fibo[i-1] + fibo[i-2])
}
#plot
plot(fibo)
}
myFibonachi(20)
myFibonachi(200)
myFibonachi(10)
myFibonachi <- function(n) {
fibo <- c(1,1)
gold <- c(((1 + sqrt(5))/2)^1/sqrt(5),((1 + sqrt(5))/2)^2/sqrt(5))
for (i in 3:n){
fibo <- c(fibo, fibo[i-1] + fibo[i-2])
gold <- c(gold, ((1 + sqrt(5))/2)^i/sqrt(5))
}
#plot fibo
plot(fibo,type = 'b')
#add golder ratio line
points(gold,col='yellow')
}
myFibonachi(10)
myFibonachi(1000)
myFibonachi(100)
myFibonachi <- function(n) {
fibo <- c(1,1)
gold <- c(((1 + sqrt(5))/2)^1/sqrt(5),((1 + sqrt(5))/2)^2/sqrt(5))
for (i in 3:n){
fibo <- c(fibo, fibo[i-1] + fibo[i-2])
gold <- c(gold, ((1 + sqrt(5))/2)^i/sqrt(5))
}
#plot fibo
plot(fibo,type = 'b')
#add golder ratio line
points(gold,col='yellow',pch=3)
}
myFibonachi(100)
myFibonachi <- function(n) {
fibo <- c(1,1)
gold <- c(((1 + sqrt(5))/2)^1/sqrt(5),((1 + sqrt(5))/2)^2/sqrt(5))
for (i in 3:n){
fibo <- c(fibo, fibo[i-1] + fibo[i-2])
gold <- c(gold, ((1 + sqrt(5))/2)^i/sqrt(5))
}
#plot fibo
plot(fibo,type = 'b')
#add golder ratio line
points(gold,col='red',pch=25)
}
myFibonachi(100)
myFibonachi(10)
myFibonachi(100)
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(randVec[i], pch = 4)
#add to matrix
}
}
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
}
}
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
ravMatrix <- c(NA)
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
rawMatrix <- c(NA)
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (is.NA(rawMatrix)) {
rawMatrix <- c(i, randVec[i])
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
#plots blue line
plot(randVec, type='l', col='blue')
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (is.na(rawMatrix)) {
rawMatrix <- c(i, randVec[i])
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (is.na(rawMatrix)) {
rawMatrix <- c(i, randVec[i])
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = c(2, length(rawMatrix) / 2))
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = c(2, length(rawMatrix) / 2))
t(convMatrix)
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = c(length(rawMatrix) / 2, 2))
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = c(length(rawMatrix) / 2, 2))
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- array(data=rawMatrix, dim = c(2, length(rawMatrix) / 2))
t(convMatrix)
}
plotmax(20)
X <- matrix(runif(9), 3, 3)
X
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- matrix(rawMatrix, nrow = length(rawMatrix) / 2)
convMatrix
}
plotmax(20)
plotmax <- function(n) {
#random vector
randVec <- runif(n)
rawMatrix = NA
#plots blue line
plot(randVec, type='l', col='blue')
matrixStarted <- FALSE
#highlitning with red crosses
for (i in 2:(n-1)) {
if (randVec[i - 1] < randVec[i] && randVec[i + 1] < randVec[i]) {
points(i, randVec[i], pch = 4, col='red')
#add to matrix
if (!(matrixStarted)) {
rawMatrix <- c(i, randVec[i])
matrixStarted <- TRUE
}else{
rawMatrix <- c(rawMatrix, i, randVec[i])
}
}
}
#print out matrix
convMatrix <- matrix(rawMatrix, nrow = length(rawMatrix) / 2, byrow=TRUE)
convMatrix
}
plotmax(20)
sortrows <- function (A, c) {
repeat {
done <- TRUE; #set the flag
for (i in 1 : (length(A[,c]) - 1)) {
if (A[i, c] > A[i+1, c]) {
swapitem <- A[i, c];
A[i, c] <- A[i + 1, c];
A[i + 1, c] <- swapitem;
done <- FALSE;
}
}
if (done){
break;
}
}
return(A)
}
sortrows(X, 3)
X <- matrix(runif(100),10,10)
image(X)
contour(X)
persp(X, phi=40)
source('~/Documents/courses/modelling/GA.r.r')
GA()
GA()
GA()
GA()
GA()
GA()
source('~/Documents/courses/modelling/GA.r.r')
rm(list=ls())
source('~/Documents/courses/modelling/GA.r.r')
source('~/Documents/courses/modelling/GA.r.r')
GA()
