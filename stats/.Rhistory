u <- c(1:5, TRUE)                  # here numeric is the lowest type
z <- c(1:5, TRUE, 'atextstring')   # lowest type here is character so everything
n <- c(a=1, b=4, c=56)             # named elements
n
X <- matrix(c(4, 7, 3, 8, 9, 2), nrow = 3)      # data entered column-wise
Y <- matrix(c(4, 7, 3, 8, 9, 2), nrow = 3, byrow = TRUE) # data entered row-wise
Z <- matrix(c(4, 7, 3, 8, 9, 2), ncol = 3)
TY <- t(Y)
TY
Y
Z2 <- matrix(c(4, 7, 3, 8, 9, 2), ncol = 3,
dimnames=list(c('row1', 'row2'), c('col1', 'col2', 'col3')))
Z2
x
x[3]    # gets the 3rd element of vector x
x <- c(2, 1, 7, 4, 34)      # c() means combine
x <- c(1:5, x, 56)          # we can combine numbers with the vector object x
x
x[3]    # gets the 3rd element of vector x
x[c(1, 5, 6)] # indexing by a vector, gets element number 1 5 and 6 in vector x
x[x > 3]      # indexing by a logical vector
x[x==1]   # another example
x[]     # gets all elements of vector x; is basically the same as writing x
x[-3]   # gets everything in x BUT the third element
X[2, 1] # gets the element in row 2 column 1 of matrix X
X[, 2]  # gets all elements in column 2 of matrix X
X[2, ]  # gets all elements of row 2 of matrix X
L <- list(a=1, b=1:3, c=matrix(1:4, 2), d=x > 4, e=y)   # Note that we can have
y <- c('I', 'think', 'programming', 'is', 'fun') # a vector of character strings
L <- list(a=1, b=1:3, c=matrix(1:4, 2), d=x > 4, e=y)   # Note that we can have
L
length(L)       # Try to understand why the length of the list is what it is...
Names <- c('Martin', 'Emily', 'Katharina', 'Nicholas', 'Susanne', 'Mikael',
'Åke', 'Annelie')
ID <- c(37, 20, 2, 5, 11, 17, 22, 13)
Gender <- c('Male', 'Female', 'Female', 'Male', 'Female', 'Male',
'Male', 'Female')
set.seed(1234)
Score <- runif(8, 5, 20)           # Some random scores from a uniform
?plot
x <- rnorm(20)
plot(1:20, x, type='S')
for(i in 2:19) {
if (x[i-1] < x[i] && x[i+1] < x[i]) {
cat('Found maximum at',i,fill=T)
points(i,x[i],col='red')
}
}
x <- rnorm(20)
plot(1:20, x, type='b')
for(i in 2:19) {
if (x[i-1] < x[i] && x[i+1] < x[i]) {
cat('Found maximum at',i,fill=T)
points(i,x[i],col='red')
}
}
phi <- seq(0, 2*pi, length.out=10)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
phi <- seq(0, 2*pi, length.out=9)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
phi <- seq(0, 2*pi, length.out=6)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
phi <- seq(0, 2*pi, length.out=7)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
op <- par(mfrow=c(1,2))
plot(sin, -5, 5, main='The sinus function')
plot(cos, -5, 5, main='The cosinus function')
par(op)
phi <- seq(0, 2*pi, length.out=7)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
X <- matrix(runif(100),10,10)
image(X)
contour(X)
persp(X, phi=40)
x <- c(2,1,4)
3*x
y <- c(1,0,1)
x*y
sub(x*y)
sum(x*y)
sqrt(sum(x*y))
#matrix (c(3,7,1,8), 2, 2)
A <- (c(3,7,1,8), 2, 2)
A <- matrix(c(3,7,1,8), 2, 2)
View(A)
A
B <- matrix(c(0,2,2,-1),2,2)
B
A <- matrix(c(2,-1),1,2)
A
B <- matrix(c(1,0,4,2,7,1),2,3)
B
C <- matrix(c(-1, 0, 2), 2,1)
C <- matrix(c(-1, 0, 2), 3,1)
C
A %*% B %*% C
RMfor <- read.csv("~/Documents/courses/stats/Ex_5/RMfor.csv", sep=';')
full.model <- lm(lime~oak+birch+alder+oak*birch+oak*alder+birch*alder, data=RMfor)
summary(full.model)
library(glmulti)
model.sel <- glmulti(full.model, level = 2, crit='aic')
summary(model.sel)
weightable(model.sel)
model <- model.matrix(~oak+birch+alder+oak*birch+oak*alder+birch*alder, data=RMfor)
kappa(model)
library(car)
fit <- lm(lime~ oak+birch+alder+oak*birch+oak*alder+birch*alder, data=RMfor)
vif(fit)
rm(list=ls())
PCA <- read.csv("~/Documents/courses/stats/Ex_6/PCA.csv", sep=';')
PCA.na <- na.omit(PCA)
View(PCA.na)
str(PCA.na)
factor(PCA.na$sex)
PCA.na$sex <-factor(PCA.na$sex)
str(PCA.na)
setwd("~/Documents/courses/stats")
getwd()
x <- 1:10
y <- c(3,7,3,5,3,3)
mx <- mean(x)
my <- mean(y)
save(x, y, file='OnlyXY.Rdata')
save(list=ls(), file='All.Rdata')
save(list=c('mx', 'my'), file='MxMy.Rdata')
rm(list=ls())
ls()
load('All.Rdata')
ls()
rm(list=ls())
load('OnlyXY.Rdata')
ls()
load('MxMy.Rdata')
ls()
##### Vectors ##################################################################
x <- c(2, 1, 7, 4, 34)      # c() means combine
x <- c(1:5, x, 56)          # we can combine numbers with the vector object x
x
y <- c('I', 'think', 'programming', 'is', 'fun') # a vector of character strings
y
sq <- 1:10                   # A sequence from 1 to 10 in steps of 1
l <- x > 4                   # a vector of logicals
l
z <- c(1:5, TRUE, 'atextstring')   # lowest type here is character so everything
z
u <- c(1:5, TRUE)                  # here numeric is the lowest type
u
n <- c(a=1, b=4, c=56)             # named elements
n
v <- vector('logical', 3)
v
nums <- vector('int',10)
nums <- vector('integer',10)
nums
seq(from=1, to=10, by=0.1)   # If we want shorter steps
seq(from=1, to=10, length.out=9) #If we want a specific length of the result
seq(along=x)	        #Gives a sequence of "count" of the elements in x
rep(1:10, times=2)
rep(1:10, times=10:1)
rep(1:4, each=3)
rep(1:4, each = 2, length.out = 10) 	# 8 integers plus two recycled 1's.
rep(1:4, each = 2, times = 3) 	     # length 24, 3 complete replications
X <- matrix(c(4, 7, 3, 8, 9, 2), nrow = 3)      # data entered column-wise
X
Y <- matrix(c(4, 7, 3, 8, 9, 2), nrow = 3, byrow = TRUE) # data entered row-wise
Y
Z <- matrix(c(4, 7, 3, 8, 9, 2), ncol = 3)
Z
TY <- t(Y)
TY
t(Z) == Y                # t() transposes the matrix i.e. change rows to columns
Z2 <- matrix(c(4, 7, 3, 8, 9, 2), ncol = 3,
dimnames=list(c('row1', 'row2'), c('col1', 'col2', 'col3')))
Z2
A <- array(1:60, dim = c(3, 5, 4))    # gives a 3-dimensional array with 3 rows,
A                                      # 5 columns and 4 "sheets"
A2 <- array(1:60, dim = c(3, 5, 2, 2)) # gives a 4-dimensional array
A2
x
x[3]    # gets the 3rd element of vector x
x[c(1, 5, 6)] # indexing by a vector, gets element number 1 5 and 6 in vector x
x[x > 3]      # indexing by a logical vector
x[-3]   # gets everything in x BUT the third element
X
X[2, 1] # gets the element in row 2 column 1 of matrix X
X[, 2]  # gets all elements in column 2 of matrix X
X[2, ]  # gets all elements of row 2 of matrix X
X[5]    # indexing MULTI-DIMENSIONAL structures with a SINGLE index, X[i] or
A[, 2, 3] # gets all elements of column 2 in "sheet" 3 of array A
n
n['b']  # indexing by name, gets the element named 'b' in vector n
Z2
Z2['row1', 'col2'] # works similarly for dimnames in matrices, gets the element
L <- list(a=1, b=1:3, c=matrix(1:4, 2), d=x > 4, e=y)   # Note that we can have
L
length(L)       # Try to understand why the length of the list is what it is...
Names <- c('Martin', 'Emily', 'Katharina', 'Nicholas', 'Susanne', 'Mikael',
'Åke', 'Annelie')
ID <- c(37, 20, 2, 5, 11, 17, 22, 13)
Gender <- c('Male', 'Female', 'Female', 'Male', 'Female', 'Male',
'Male', 'Female')
set.seed(1234)
Score <- runif(8, 5, 20)           # Some random scores from a uniform
Height <- rnorm(8, ifelse(Gender=='Male', 1.815, 1.668), 0.06)
Group <- c(1, 3, 2, 2, 3, 3, 3, 2)
dat <- data.frame(Firstname=Names, ID=ID, Sex=Gender, Score=Score,
Height=Height, Group=Group)    # We use the data.frame() function to put
dat
d.list <- list(Firstname=Names, ID=ID, Sex=Gender, Score=Score,
Height=Height, Group=Group)
dat.list <- as.data.frame(d.list)
str(dat)       # shows the structure of the object (the dataframe in this case)
str(d.list)    # the structure of the list, compare with the above
str(dat.list)  # Looks the same as str(dat) telling us that as.data.frame worked
head(dat)      # Shows the first 6 (default) cases in the dataframe, we can show
head(d.list)         # shows the first 6 ELEMENTS of the list, compare also to
head(as.list(1:10))
summary(dat)     # the summary function applied on a data.frame object
summary(d.list)  # the summary function on a list
class(dat)       # the class of an object tells functions how to treat the
mode(dat)    # the mode of an object describes how (of what type)
class(d.list)
mode(d.list)
names(dat)    # gets the names of the variables in dataframe dat
dim(dat)      # gets the dimensions of dat. The result is a vector with first
dim(dat)      # gets the dimensions of dat. The result is a vector with first
length(x)     # finds the length of object x  (works for e.g. lists, vectors,
length(X)       # a matrix
X
length(dat)     # a dataframe
dat
d.list
length(d.list)  # a list
L
L$a     # gets element a in the list L
L['a']  # gets element a AS A LIST object
L[1]    # does the same since a is the first element in the list L
L[['a']] #(or L[[1]]); does the same as L$a
L['c']        # extracts c as a list element; check class(L['c']) and
L[['c']] # ...class(L[['c']]); L[['c']] extracts c as it is (i.e. as a matrix in
L[['c']][1, 2] # gets the element of row 1, column 2 in the matrix c
str(L$a)
str(L['a'])
dat
dat$Score
dat['Score']
dat[['Score']]
dat[,'Score'] # This may seem wierd but this is how indexing on dataframes work
dat[3, 4]     # Indexing as in a matrix, gets 3rd case of 4th variable
dat[3, 'Score']
dat[dat$Sex=='Female', ]  # Logical indexing based on the values of one of the
dat$Group <- factor(dat$Group, labels=c('teacher', 'PhDstudent', 'other'))
str(dat)          # we see that Group is now a factor with levels 1, 2 and 3
dat$Group         # when you have a look at a factor you can also see its levels
levels(dat$Group) # to see (extract) the levels of a factor we use the
unique(dat$Group) 	#Works similarly to levels(), but can be used on other types
comp.dat <- read.csv('compensation.csv')   # Remember, we've already
rm(list=ls())
comp.dat <- read.csv('compensation.csv')   # Remember, we've already
?read.csv
str(comp.dat)
summary(comp.dat)
names(comp.dat)
dim(comp.dat)
help(trees)
str(trees)      # we have a look at the dataset
plot(trees$Girth, trees$Volume)   # A graphics window appears with a scatterplot
plot(trees)                   # the plot-function applied to a data.frame
tree.lm <- lm(trees$Volume ~ trees$Girth) # This is a statistical model
plot(tree.lm)                             # Now, we can see that the plot-
plot(Volume ~ Girth, data=trees)        # We can use the formula representation
plot(dat$Height)                        # Aha, here the x-values are just the
Names <- c('Martin', 'Emily', 'Katharina', 'Nicholas', 'Susanne', 'Mikael',
'Åke', 'Annelie')
ID <- c(37, 20, 2, 5, 11, 17, 22, 13)
Gender <- c('Male', 'Female', 'Female', 'Male', 'Female', 'Male',
'Male', 'Female')
# In the following we will use the random number generator to get some random
# numbers for our dataset. We set a seed for the random number genarator
# such that we all get the same random samples!
set.seed(1234)
Score <- runif(8, 5, 20)           # Some random scores from a uniform
# distribution in the interval 5 to 20
Height <- rnorm(8, ifelse(Gender=='Male', 1.815, 1.668), 0.06)
# some random numbers from a normal distribution with
# mean for males of 1.815 and a mean for females  of 1.668 and a standard
# deviation of 0.06
Group <- c(1, 3, 2, 2, 3, 3, 3, 2)
dat <- data.frame(Firstname=Names, ID=ID, Sex=Gender, Score=Score,
Height=Height, Group=Group)    # We use the data.frame() function to put
# it all together
dat
plot(dat$Height)                        # Aha, here the x-values are just the
plot(dat$Sex, dat$Height)    # Here we see what happens if we plot with a factor
boxplot(trees)        # boxplot applied to a dataframe shows box and whisker
boxplot(dat[, -7])    # NOTE that even factors are plotted with a box! In this
sample(c('Flat' , 'House', 'Castle'), 8, replace=TRUE,
prob=c(0.55, 0.44, 0.01))
Residency <- sample(c('Flat' , 'House', 'Castle'), 8, replace=TRUE,
prob=c(0.55, 0.44, 0.01))
dat$Res <- Residency      # You could have done this in one command like:
dat                     # Yes, it is there!
str(dat)
Food <- sample(c('Fish' , 'Veg', 'Meat'), 8, replace=TRUE)
dat <- cbind(dat, Food)
str(dat)      # we see that the new variable got its name from the name of the
str(dat$Food)
str(Food)
dat$Food
Food
class(dat$Food)    # dat$Food has class "factor" (once again, the class of an
class(Food)                     # Food has class "character"
mode(dat$Food)                  # dat$Food has mode "numeric" (the mode of an
mode(Food)                      # Food is a character vector
Food
ls()                            # Here we can see that we have object Food and
newcase <- data.frame(Firstname='Eva', ID=12, Sex='Female',
Score=runif(1, 5, 20), Height=rnorm(1, 1.668, 0.06), Group='other',
Res=sample(c('Flat' , 'House', 'Castle'), 1, replace=TRUE,
prob=c(0.55, 0.44, 0.01)),
Food=sample(c('Fish' , 'Veg', 'Meat'), 1, replace=TRUE))
dat <- rbind(dat, newcase)
str(dat)
sort(dat$Score)                   # dat$Score in increasing value order
sort(dat$Score, decreasing=TRUE)  # dat$Score in decreasing value order
sort(dat$Res)                     # dat$Res in alphabetical order; REMEMBER
sort(dat$Group)                   # dat$Group in "level" order;
rev(dat$Score)           # reverses dat$Score
rev(sort(dat$Score))     # rev() reverses the sorting of dat$Score
order(dat$Score)     # a vector of indices that when applied to e.g.
rev(dat$Score)           # reverses dat$Score
dat$Score
order(dat$Score)     # a vector of indices that when applied to e.g.
dat$Firstname[order(dat$Score)]
dat[order(dat$Sex, dat$Height),]  # you can sort on several variables at the
dat[order(dat$Sex, -dat$Height),] # and you can use - (subtraction sign) to
rank(dat$Food)       # the rank of each case according to the levelling of Food.
rank(dat$Sex)
dat.Females <- dat[dat$Sex=='Female',]
dat.Males <- subset(dat, Sex=='Male')      # Note that when using subset() on a
dat.Males.red <- subset(dat, Sex=='Male', select=c(Firstname, Score, Height))
str(dat.Males.red)
dat[dat$Sex=='Male', c('Firstname', 'Score', 'Height')]
plot(dat.Females$Sex, dat.Females$Score)  # males are plotted too despite there
str(dat.Females)
dat.Females <- droplevels(dat.Females)
str(dat.Females)
plot(dat.Females$Sex, dat.Females$Score)  # males are plotted too despite there
dat.Males$Firstname <- factor(dat.Males$Firstname)
dat.Males$Firstname <- factor(dat.Males$Firstname)
str(dat.Males)
worms <- read.table('worms.txt', header=T)  # Data on worm counts in
worms                                       # different fields with
hcides <- read.table('herbicides.txt', header=T)  # Data on which
hcides			# herbicide works best in which type of vegetation
match(worms$Vegetation, hcides$Type)
match(hcides$Type, worms$Vegetation)  # If we switch the order of the two
ix <- match(worms$Vegetation, hcides$Type)    # we assign the result from match
worms$hbc <- hcides$Herbicide[ix]             # hcides$Herbicide is expanded by
worms         # Ah, nice! Seems to work...e.g. all grasslands have hbc=Allclear
(ftimes <- read.table('fltimes.txt', header=T)) # we put it within
(lforms <- read.table('lifeforms.txt', header=T))
names(lforms)
names(ftimes)
merge(ftimes, lforms)             # In this case our focus is on flowering time
merge(ftimes, lforms, all=T)        # Now we got missing values (NA) in those
merge(ftimes, lforms, all.x=T)
merge(ftimes, lforms, all.y=T)
all.flowers <- merge(ftimes, lforms, all=T)
seeds <- read.table('seedwts.txt', header=T)
seeds
merge(all.flowers, seeds)
seeds
merge(all.flowers, seeds, by.x=c('Genus', 'species'), by.y=c('name1', 'name2'))
colMeans(comp.dat[,1:2])    # calculates the mean of columns 1 and 2 of comp.dat
colMeans(dat[, c(2, 4, 5)]) # calculates the mean of columns 2, 4 and 5
colMeans(dat)               # We see that dat contains some non numeric columns
colSums(comp.dat[,1:2])     # Calculates sums instead (as expected!)
rowMeans(dat[,4:5])         # Maybe not very useful here but just to show that
table(dat$Sex, dat$Group)
aggregate(comp.dat$Fruit, by=list(comp.dat$Grazing), mean)
aggregate(dat[,c('Score', 'Height')], by=list(dat$Sex), mean)
aggregate(dat[,c('Score', 'Height')], by=list(dat$Sex), sd)
aggregate(dat[,c('Score', 'Height')], by=list(dat$Sex), length)
tapply(comp.dat$Fruit, INDEX=list(comp.dat$Grazing), mean)
growth <- read.csv('growth.csv')
str(growth)             # to check that the import worked
names(growth)           # to see how the variables are named
aggregate(growth$gain, by=list(growth$supplement, growth$diet), mean)
aggregate(list(gain=growth$gain), by=list(suppl=growth$supplement,
diet=growth$diet), mean)
tapply(growth$gain, list(growth$supplement, growth$diet), mean)
str(comp.dat)
head(comp.dat)
plot(comp.dat$Grazing, comp.dat$Fruit)
boxplot(comp.dat$Fruit~comp.dat$Grazing)
hist(comp.dat$Fruit)
op <- par(mfrow=c(2, 1))    # we want two figures in the same window organised
hist(comp.dat$Fruit[comp.dat$Grazing=='Grazed'], breaks=10, main='Grazed',
xlab='Fruit production', xlim=c(0, 120))
hist(comp.dat$Fruit[comp.dat$Grazing=='Ungrazed'], breaks=10, main='Ungrazed',
xlab='Fruit production',  xlim=c(0, 120))
par(op)
?barplot  # Look at the help on barplot...it's rather complex, but have a look at
(m.fruit <- tapply(comp.dat$Fruit, comp.dat$Grazing, mean))
barplot(m.fruit)         # Seems OK but the scale of the y-axis could be better.
barplot(m.fruit, ylim=c(0, 100))    # The help page shows we can specify limits
barplot(m.fruit, ylim=c(0, 100), xlab='Treatment', ylab='Fruit production')
sd.fruit <- tapply(comp.dat$Fruit, comp.dat$Grazing, sd)
b.pl <- barplot(m.fruit, ylim=c(0, 100), xlab='Treatment',
ylab='Fruit production')
b.pl          # Here they are! OK lets get this into the arrows function
arrows(b.pl, m.fruit - sd.fruit, b.pl, m.fruit + sd.fruit, code=3,
angle=90, length=0.1) # code specifies type of arrow(double headed),
n.fruit <- tapply(comp.dat$Fruit, comp.dat$Grazing, length)
text(b.pl, 3, paste('n = ', n.fruit))  # we use b.pl again to find the
paste('n = ', n.fruit)                # ...and try this out to see what it does
plot(comp.dat$Root, comp.dat$Fruit)         # formula alternative would be
plot(Fruit~Root, data=comp.dat,
xlab=list('Root biomass', cex=1.5),
ylab=list('Fruit production', cex=1.5),
cex=2, pch=21, bg='grey')
bg.col <- ifelse(comp.dat$Grazing == 'Grazed', 'green', 'red')
bg.col <- c('green', 'red')   # Here we can include as many colours as we have
bg.col[comp.dat$Grazing]      # We use the factor Grazing (its numeric
plot(Fruit~Root, data=comp.dat,
xlab=list('Root biomass', cex=1.5),      # the call to xlab is a list with
ylab=list('Fruit production', cex=1.5),
cex=2, pch=21, bg=bg.col[Grazing])       # I decided to use the cool way!
legend('topleft', legend=c('Grazed', 'Ungrazed'),
pch=21, pt.bg=c('green', 'red'), pt.cex=2)
pdf('Beautiful_figure.pdf', paper='a4') # We start the device (i.e. a pdf-file)
plot(Fruit~Root, data=comp.dat,              # We plot the figure
xlab=list('Root biomass', cex=1.5),
ylab=list('Fruit production', cex=1.5),
cex=2, pch=21, bg=bg.col[Grazing])
legend('topleft', legend=c('Grazed', 'Ungrazed'),
pch=21, pt.bg=c('green', 'red'), pt.cex=2) # and add a legend
dev.off()                                     # And turn the device off
