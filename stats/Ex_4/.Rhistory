u <- c(1:5, TRUE)                  # here numeric is the lowest type
z <- c(1:5, TRUE, 'atextstring')   # lowest type here is character so everything
n <- c(a=1, b=4, c=56)             # named elements
n
X <- matrix(c(4, 7, 3, 8, 9, 2), nrow = 3)      # data entered column-wise
Y <- matrix(c(4, 7, 3, 8, 9, 2), nrow = 3, byrow = TRUE) # data entered row-wise
Z <- matrix(c(4, 7, 3, 8, 9, 2), ncol = 3)
TY <- t(Y)
TY
Y
Z2 <- matrix(c(4, 7, 3, 8, 9, 2), ncol = 3,
dimnames=list(c('row1', 'row2'), c('col1', 'col2', 'col3')))
Z2
x
x[3]    # gets the 3rd element of vector x
x <- c(2, 1, 7, 4, 34)      # c() means combine
x <- c(1:5, x, 56)          # we can combine numbers with the vector object x
x
x[3]    # gets the 3rd element of vector x
x[c(1, 5, 6)] # indexing by a vector, gets element number 1 5 and 6 in vector x
x[x > 3]      # indexing by a logical vector
x[x==1]   # another example
x[]     # gets all elements of vector x; is basically the same as writing x
x[-3]   # gets everything in x BUT the third element
X[2, 1] # gets the element in row 2 column 1 of matrix X
X[, 2]  # gets all elements in column 2 of matrix X
X[2, ]  # gets all elements of row 2 of matrix X
L <- list(a=1, b=1:3, c=matrix(1:4, 2), d=x > 4, e=y)   # Note that we can have
y <- c('I', 'think', 'programming', 'is', 'fun') # a vector of character strings
L <- list(a=1, b=1:3, c=matrix(1:4, 2), d=x > 4, e=y)   # Note that we can have
L
length(L)       # Try to understand why the length of the list is what it is...
Names <- c('Martin', 'Emily', 'Katharina', 'Nicholas', 'Susanne', 'Mikael',
'Ã…ke', 'Annelie')
ID <- c(37, 20, 2, 5, 11, 17, 22, 13)
Gender <- c('Male', 'Female', 'Female', 'Male', 'Female', 'Male',
'Male', 'Female')
set.seed(1234)
Score <- runif(8, 5, 20)           # Some random scores from a uniform
?plot
x <- rnorm(20)
plot(1:20, x, type='S')
for(i in 2:19) {
if (x[i-1] < x[i] && x[i+1] < x[i]) {
cat('Found maximum at',i,fill=T)
points(i,x[i],col='red')
}
}
x <- rnorm(20)
plot(1:20, x, type='b')
for(i in 2:19) {
if (x[i-1] < x[i] && x[i+1] < x[i]) {
cat('Found maximum at',i,fill=T)
points(i,x[i],col='red')
}
}
phi <- seq(0, 2*pi, length.out=10)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
phi <- seq(0, 2*pi, length.out=9)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
phi <- seq(0, 2*pi, length.out=6)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
phi <- seq(0, 2*pi, length.out=7)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
op <- par(mfrow=c(1,2))
plot(sin, -5, 5, main='The sinus function')
plot(cos, -5, 5, main='The cosinus function')
par(op)
phi <- seq(0, 2*pi, length.out=7)
x <- cos(phi)
y <- sin(phi)
plot(NA,NA,xlim=c(-1,1), ylim=c(-1,1), type='n', xlab='',ylab='')
polygon(x,y,col='red')
X <- matrix(runif(100),10,10)
image(X)
contour(X)
persp(X, phi=40)
x <- c(2,1,4)
3*x
y <- c(1,0,1)
x*y
sub(x*y)
sum(x*y)
sqrt(sum(x*y))
#matrix (c(3,7,1,8), 2, 2)
A <- (c(3,7,1,8), 2, 2)
A <- matrix(c(3,7,1,8), 2, 2)
View(A)
A
B <- matrix(c(0,2,2,-1),2,2)
B
A <- matrix(c(2,-1),1,2)
A
B <- matrix(c(1,0,4,2,7,1),2,3)
B
C <- matrix(c(-1, 0, 2), 2,1)
C <- matrix(c(-1, 0, 2), 3,1)
C
A %*% B %*% C
RMfor <- read.csv("~/Documents/courses/stats/Ex_5/RMfor.csv", sep=';')
full.model <- lm(lime~oak+birch+alder+oak*birch+oak*alder+birch*alder, data=RMfor)
summary(full.model)
library(glmulti)
model.sel <- glmulti(full.model, level = 2, crit='aic')
summary(model.sel)
weightable(model.sel)
model <- model.matrix(~oak+birch+alder+oak*birch+oak*alder+birch*alder, data=RMfor)
kappa(model)
library(car)
fit <- lm(lime~ oak+birch+alder+oak*birch+oak*alder+birch*alder, data=RMfor)
vif(fit)
rm(list=ls())
PCA <- read.csv("~/Documents/courses/stats/Ex_6/PCA.csv", sep=';')
PCA.na <- na.omit(PCA)
View(PCA.na)
str(PCA.na)
factor(PCA.na$sex)
PCA.na$sex <-factor(PCA.na$sex)
str(PCA.na)
setwd("~/Documents/courses/stats/Ex_3")
#1 open file forest
forest <- read.csv("forest.csv",header = TRUE, sep=';', row.names = NULL)
str(forest)
View(forest)
#2 build boxplots for different species grouped by study site
boxplot(forest$oak~forest$site, xlab="Site", ylab="Oak")
boxplot(forest$ald~forest$site, xlab="Site", ylab="Ald")
#3 descriptive statistics
summary(forest)
#4 make error bar
av.forest <- aggregate(forest, by=list(forest$site), FUN=mean, na.rm=TRUE)
var.forest <- aggregate(forest, by=list(forest$site), FUN=var, na.rm=TRUE)
site.names <- factor(av.forest$Group.1)
n.forest <- table(forest$site)
n.forest
se.forest <- sqrt(var.forest/n.forest)
se.forest <- cbind(se.forest, site.names)
xvals <- barplot(av.forest$oak, xlab="Site", ylab="Oak", ylim=c(0,1))
axis(1, at=xvals, labels=site.names)
arrows(xvals, av.forest$oak + se.forest$oak, xvals,
av.forest$oak - se.forest$oak, code=3, angle=90, length=0.1)
#5  Make a selection of cases such that only study sites with numbers less than, say, 30 are included
# using subset. Make some plotsto see how it affects your output.
forest.30 <- subset(forest,forest$site < 30)
str(forest.30)
boxplot(fores.30t$oak~forest.30$site, xlab="Site", ylab="Oak")
boxplot(forest.30$oak~forest.30$site, xlab="Site", ylab="Oak")
boxplot(forest.30$ald~forest.30$site, xlab="Site", ylab="Ald")
av.forest.30 <- aggregate(forest.30, by=list(forest.30$site), FUN=mean, na.rm=TRUE)
var.forest.30 <- aggregate(forest.30, by=list(forest.30$site), FUN=var, na.rm=TRUE)
site.names <- factor(av.forest.30$Group.1)
n.forest.30 <- table(forest.30$site)
n.forest.30
se.forest.30 <- sqrt(var.forest.30/n.forest.30)
se.forest.30 <- cbind(se.forest.30, site.names)
xvals <- barplot(av.forest.30$oak, xlab="Site", ylab="Oak", ylim=c(0,1))
axis(1, at=xvals, labels=site.names)
arrows(xvals, av.forest.30$oak + se.forest.30$oak, xvals,
av.forest.30$oak - se.forest.30$oak, code=3, angle=90, length=0.1)
rm(list=ls())
setwd("~/Documents/courses/stats/Ex_4")
bodyweight <- read.csv('bodyweight.csv', sep=';')
View(bodyweight)
str(bodyweight)
t.test(bodyweight$bw~bodyweight$sex)
t.test(bodyweight$bw~bodyweight$sex, var.equal = TRUE)
library(car)
leveneTest(bodyweight$bw~bodyweight$sex)
males <- subset(bodyweight, bodyweight$sex == 'm')
females <- subset(bodyweight, bodyweight$sex == 'f')
av.males <- mean(males$bw, na.rm = TRUE)
av.females <- mean(females$bw, na.rm = TRUE)
sd.males <- sd(males$bw, na.rm = TRUE)
sd.females <- sd(females$bw, na.rm = TRUE)
se.males <- (sd.males/sqrt(length(males$bw)))
se.females <- (sd.females/sqrt(length(females$bw)))
ci.males <- se.males * 1.96
ci.females <- se.females * 1.96
means <- cbind(av.males, av.females)
cis <- cbind(ci.males, ci.females)
#build plot
library(Hmisc)
x <- c(1:2)
plot(x, means, type='b', lty=0, xlim=c(0.5, 2.5),
xlab="Sex", ylim=c(0, 100), ylab="Weight", axes=FALSE)
axis(1, at=c(0.5, 1, 2, 2.5), labels=c("","Males", "Females",  ""))
axis(2, at=seq(0, 100, 5))
errbar(x, means, means + cis, means - cis, add=TRUE)
